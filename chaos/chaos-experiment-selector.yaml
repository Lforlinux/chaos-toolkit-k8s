apiVersion: v1
kind: ConfigMap
metadata:
  name: chaos-experiment-selector
  namespace: default
  labels:
    app: chaos-selector
data:
  experiments.yaml: |
    experiments:
      - name: "Stop Random Pod"
        description: "Randomly terminates a pod to test pod restart resilience"
        category: "Pod Chaos"
        file: "stop-random-pod.json"
        icon: "üî•"
        risk_level: "Medium"
        duration: "2 minutes"
        
      - name: "Modify Deployment Resources"
        description: "Reduces CPU/Memory limits and scales down deployment"
        category: "Resource Chaos"
        file: "modify-deployment.json"
        icon: "‚ö°"
        risk_level: "Low"
        duration: "3 minutes"
        
      - name: "Network Latency & Packet Loss"
        description: "Introduces network latency and packet loss"
        category: "Network Chaos"
        file: "network-chaos.json"
        icon: "üåê"
        risk_level: "High"
        duration: "2 minutes"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaos-selector-ui
  namespace: default
  labels:
    app: chaos-selector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chaos-selector
  template:
    metadata:
      labels:
        app: chaos-selector
    spec:
      containers:
      - name: chaos-selector
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: experiments-config
          mountPath: /usr/share/nginx/html/experiments.yaml
          subPath: experiments.yaml
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: experiments-config
        configMap:
          name: chaos-experiment-selector
      - name: html-content
        configMap:
          name: chaos-selector-ui
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaos-selector-ui
  namespace: default
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Chaos Engineering Experiments</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            .header {
                background: linear-gradient(135deg, #ff6b6b, #ee5a24);
                color: white;
                padding: 30px;
                text-align: center;
            }
            .header h1 {
                margin: 0;
                font-size: 2.5em;
                font-weight: 300;
            }
            .header p {
                margin: 10px 0 0 0;
                opacity: 0.9;
                font-size: 1.1em;
            }
            .experiments-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 25px;
                padding: 30px;
            }
            .experiment-card {
                background: #f8f9fa;
                border-radius: 12px;
                padding: 25px;
                border-left: 5px solid #007bff;
                transition: all 0.3s ease;
                cursor: pointer;
            }
            .experiment-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            }
            .experiment-card.pod-chaos {
                border-left-color: #ff6b6b;
            }
            .experiment-card.resource-chaos {
                border-left-color: #ffa726;
            }
            .experiment-card.network-chaos {
                border-left-color: #42a5f5;
            }
            .experiment-header {
                display: flex;
                align-items: center;
                margin-bottom: 15px;
            }
            .experiment-icon {
                font-size: 2em;
                margin-right: 15px;
            }
            .experiment-title {
                font-size: 1.3em;
                font-weight: 600;
                color: #2c3e50;
                margin: 0;
            }
            .experiment-description {
                color: #6c757d;
                line-height: 1.6;
                margin-bottom: 15px;
            }
            .experiment-meta {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
            }
            .risk-level {
                padding: 4px 12px;
                border-radius: 20px;
                font-size: 0.8em;
                font-weight: 600;
                text-transform: uppercase;
            }
            .risk-low {
                background: #d4edda;
                color: #155724;
            }
            .risk-medium {
                background: #fff3cd;
                color: #856404;
            }
            .risk-high {
                background: #f8d7da;
                color: #721c24;
            }
            .duration {
                color: #6c757d;
                font-size: 0.9em;
            }
            .run-button {
                background: linear-gradient(135deg, #007bff, #0056b3);
                color: white;
                border: none;
                padding: 12px 25px;
                border-radius: 25px;
                font-size: 1em;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                width: 100%;
            }
            .run-button:hover {
                background: linear-gradient(135deg, #0056b3, #004085);
                transform: translateY(-2px);
            }
            .run-button:disabled {
                background: #6c757d;
                cursor: not-allowed;
                transform: none;
            }
            .status {
                text-align: center;
                padding: 20px;
                margin: 20px 30px;
                border-radius: 8px;
                font-weight: 600;
            }
            .status.running {
                background: #d1ecf1;
                color: #0c5460;
                border: 1px solid #bee5eb;
            }
            .status.success {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            .status.error {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üî• Chaos Engineering Lab</h1>
                <p>Test your microservices resilience with controlled chaos experiments</p>
            </div>
            
            <div id="status" class="status" style="display: none;"></div>
            
            <div class="experiments-grid" id="experiments-grid">
                <!-- Experiments will be loaded here -->
            </div>
        </div>

        <script>
            let experiments = [];
            let currentExperiment = null;

            // Load experiments configuration
            async function loadExperiments() {
                try {
                    const response = await fetch('/experiments.yaml');
                    const text = await response.text();
                    const yaml = jsyaml.load(text);
                    experiments = yaml.experiments;
                    renderExperiments();
                } catch (error) {
                    console.error('Failed to load experiments:', error);
                    showStatus('Failed to load experiments configuration', 'error');
                }
            }

            // Render experiments
            function renderExperiments() {
                const grid = document.getElementById('experiments-grid');
                grid.innerHTML = '';

                experiments.forEach((exp, index) => {
                    const card = document.createElement('div');
                    card.className = `experiment-card ${exp.category.toLowerCase().replace(' ', '-')}`;
                    
                    const riskClass = `risk-${exp.risk_level.toLowerCase()}`;
                    
                    card.innerHTML = `
                        <div class="experiment-header">
                            <div class="experiment-icon">${exp.icon}</div>
                            <h3 class="experiment-title">${exp.name}</h3>
                        </div>
                        <p class="experiment-description">${exp.description}</p>
                        <div class="experiment-meta">
                            <span class="risk-level ${riskClass}">${exp.risk_level} Risk</span>
                            <span class="duration">‚è±Ô∏è ${exp.duration}</span>
                        </div>
                        <button class="run-button" onclick="runExperiment(${index})">
                            üöÄ Run Experiment
                        </button>
                    `;
                    
                    grid.appendChild(card);
                });
            }

            // Run experiment
            async function runExperiment(index) {
                const experiment = experiments[index];
                currentExperiment = experiment;
                
                showStatus(`üî• Running ${experiment.name}...`, 'running');
                
                try {
                    // Create a new chaos experiment job
                    const response = await fetch('/api/run-chaos', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            experiment: experiment.file,
                            name: experiment.name
                        })
                    });

                    if (response.ok) {
                        showStatus(`‚úÖ ${experiment.name} started successfully!`, 'success');
                        
                        // Monitor the experiment
                        setTimeout(() => {
                            checkExperimentStatus();
                        }, 5000);
                    } else {
                        throw new Error('Failed to start experiment');
                    }
                } catch (error) {
                    console.error('Experiment failed:', error);
                    showStatus(`‚ùå Failed to run ${experiment.name}: ${error.message}`, 'error');
                }
            }

            // Check experiment status
            async function checkExperimentStatus() {
                try {
                    const response = await fetch('/api/chaos-status');
                    const status = await response.json();
                    
                    if (status.running) {
                        showStatus(`üî• ${currentExperiment.name} is still running...`, 'running');
                        setTimeout(checkExperimentStatus, 10000); // Check every 10 seconds
                    } else if (status.completed) {
                        showStatus(`‚úÖ ${currentExperiment.name} completed successfully!`, 'success');
                    } else if (status.failed) {
                        showStatus(`‚ùå ${currentExperiment.name} failed: ${status.error}`, 'error');
                    }
                } catch (error) {
                    console.error('Failed to check status:', error);
                }
            }

            // Show status message
            function showStatus(message, type) {
                const statusDiv = document.getElementById('status');
                statusDiv.textContent = message;
                statusDiv.className = `status ${type}`;
                statusDiv.style.display = 'block';
                
                if (type === 'success' || type === 'error') {
                    setTimeout(() => {
                        statusDiv.style.display = 'none';
                    }, 5000);
                }
            }

            // Load experiments on page load
            document.addEventListener('DOMContentLoaded', loadExperiments);
        </script>
        
        <script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js"></script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: chaos-selector-ui
  namespace: default
  labels:
    app: chaos-selector
spec:
  selector:
    app: chaos-selector
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: ClusterIP
