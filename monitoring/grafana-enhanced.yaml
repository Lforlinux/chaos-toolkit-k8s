# Enhanced Grafana Setup with Comprehensive Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  # Kubernetes Cluster Overview Dashboard
  kubernetes-cluster-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Kubernetes Cluster Overview",
        "tags": ["kubernetes", "cluster"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Cluster CPU Usage",
            "type": "stat",
            "targets": [
              {
                "expr": "100 - (avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "legendFormat": "CPU Usage %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "min": 0,
                "max": 100
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Cluster Memory Usage",
            "type": "stat",
            "targets": [
              {
                "expr": "100 - ((node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100)",
                "legendFormat": "Memory Usage %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "min": 0,
                "max": 100
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Pod Count by Namespace",
            "type": "piechart",
            "targets": [
              {
                "expr": "count by (namespace) (kube_pod_info)",
                "legendFormat": "{{namespace}}"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "Node Status",
            "type": "stat",
            "targets": [
              {
                "expr": "count(kube_node_info)",
                "legendFormat": "Total Nodes"
              },
              {
                "expr": "count(kube_node_status_condition{condition=\"Ready\",status=\"true\"})",
                "legendFormat": "Ready Nodes"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
  
  # Microservice Application Dashboard
  microservice-application.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Microservice Application Monitoring",
        "tags": ["microservice", "application"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Service Health Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\"microservice-.*\"}",
                "legendFormat": "{{job}} - {{instance}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {
                    "options": {
                      "0": {"color": "red", "text": "DOWN"},
                      "1": {"color": "green", "text": "UP"}
                    },
                    "type": "value"
                  }
                ]
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Pod CPU Usage by Service",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{pod=~\"emailservice-.*|checkoutservice-.*|recommendationservice-.*|paymentservice-.*|productcatalogservice-.*|cartservice-.*|currencyservice-.*|shippingservice-.*|adservice-.*|frontend-.*|redis-cart-.*\"}[5m]) * 100",
                "legendFormat": "{{pod}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "min": 0
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Pod Memory Usage by Service",
            "type": "timeseries",
            "targets": [
              {
                "expr": "container_memory_working_set_bytes{pod=~\"emailservice-.*|checkoutservice-.*|recommendationservice-.*|paymentservice-.*|productcatalogservice-.*|cartservice-.*|currencyservice-.*|shippingservice-.*|adservice-.*|frontend-.*|redis-cart-.*\"} / 1024 / 1024",
                "legendFormat": "{{pod}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "MB",
                "min": 0
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Network I/O by Pod",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(container_network_receive_bytes_total{pod=~\"emailservice-.*|checkoutservice-.*|recommendationservice-.*|paymentservice-.*|productcatalogservice-.*|cartservice-.*|currencyservice-.*|shippingservice-.*|adservice-.*|frontend-.*|redis-cart-.*\"}[5m])",
                "legendFormat": "{{pod}} - RX"
              },
              {
                "expr": "rate(container_network_transmit_bytes_total{pod=~\"emailservice-.*|checkoutservice-.*|recommendationservice-.*|paymentservice-.*|productcatalogservice-.*|cartservice-.*|currencyservice-.*|shippingservice-.*|adservice-.*|frontend-.*|redis-cart-.*\"}[5m])",
                "legendFormat": "{{pod}} - TX"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "Bps",
                "min": 0
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "Deployment Replicas",
            "type": "table",
            "targets": [
              {
                "expr": "kube_deployment_status_replicas{namespace=\"default\"}",
                "legendFormat": "Desired"
              },
              {
                "expr": "kube_deployment_status_replicas_ready{namespace=\"default\"}",
                "legendFormat": "Ready"
              },
              {
                "expr": "kube_deployment_status_replicas_available{namespace=\"default\"}",
                "legendFormat": "Available"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
  
  # Pod Details Dashboard
  pod-details.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Pod Details Monitoring",
        "tags": ["kubernetes", "pods"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Pod Status by Namespace",
            "type": "table",
            "targets": [
              {
                "expr": "kube_pod_status_phase{namespace=\"default\"}",
                "legendFormat": "{{pod}} - {{phase}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Pod Restart Count",
            "type": "timeseries",
            "targets": [
              {
                "expr": "kube_pod_container_status_restarts_total{namespace=\"default\"}",
                "legendFormat": "{{pod}} - {{container}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "short",
                "min": 0
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Container Resource Requests vs Limits",
            "type": "timeseries",
            "targets": [
              {
                "expr": "kube_pod_container_resource_requests{namespace=\"default\", resource=\"cpu\"}",
                "legendFormat": "{{pod}} - {{container}} - CPU Request"
              },
              {
                "expr": "kube_pod_container_resource_limits{namespace=\"default\", resource=\"cpu\"}",
                "legendFormat": "{{pod}} - {{container}} - CPU Limit"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "short",
                "min": 0
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Container Resource Requests vs Limits (Memory)",
            "type": "timeseries",
            "targets": [
              {
                "expr": "kube_pod_container_resource_requests{namespace=\"default\", resource=\"memory\"}",
                "legendFormat": "{{pod}} - {{container}} - Memory Request"
              },
              {
                "expr": "kube_pod_container_resource_limits{namespace=\"default\", resource=\"memory\"}",
                "legendFormat": "{{pod}} - {{container}} - Memory Limit"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "bytes",
                "min": 0
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
          value: "/var/lib/grafana/dashboards/kubernetes-cluster-overview.json"
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-external
  namespace: monitoring
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: LoadBalancer
