apiVersion: v1
kind: ConfigMap
metadata:
  name: availability-test-config
  namespace: availability-test
data:
  app.py: |
    #!/usr/bin/env python3
    """
    Availability Test Application for Microservices Demo
    Modular test case structure for scalable testing
    """

    import os
    import time
    import json
    import requests
    import threading
    from datetime import datetime, timedelta
    from flask import Flask, render_template, jsonify
    from flask_cors import CORS

    app = Flask(__name__)
    CORS(app)

    # Configuration
    CART_SERVICE_URL = os.getenv('CART_SERVICE_URL', 'http://cartservice.default.svc.cluster.local:7070')
    FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://frontend.default.svc.cluster.local:80')
    TEST_INTERVAL = int(os.getenv('TEST_INTERVAL', '300'))  # 5 minutes in seconds

    # Test results storage - Jenkins-like format
    test_runs = []  # List of test runs with build numbers
    current_build_number = 0

    class TestCaseManager:
        """Manages all test cases"""
        
        def __init__(self):
            self.test_cases = {
                'cart_services': {
                    'name': 'Cart Services Test',
                    'description': 'Tests cart add/remove functionality',
                    'enabled': True
                }
            }
        
        def get_enabled_test_cases(self):
            """Get all enabled test cases"""
            return {name: config for name, config in self.test_cases.items() if config.get('enabled', True)}
        
        def run_cart_services_test(self):
            """Run cart services test case"""
            test_result = {
                'timestamp': datetime.now().isoformat(),
                'test_name': 'cart_services_test',
                'status': 'failed',
                'duration': 0,
                'error': None,
                'steps': []
            }
            
            start_time = time.time()
            session = requests.Session()
            session.timeout = 30
            
            try:
                # Step 1: User visits the website (load frontend)
                test_result['steps'].append('👤 User visits the website...')
                frontend_response = session.get(f"{FRONTEND_URL}/", timeout=10)
                if frontend_response.status_code != 200:
                    raise Exception(f"Frontend not accessible: {frontend_response.status_code}")
                test_result['steps'].append(f'✅ Website loaded successfully (HTTP {frontend_response.status_code})')
                
                # Step 2: User browses products (verify product catalog is working)
                test_result['steps'].append('🛍️ User browses product catalog...')
                if 'Online Boutique' in frontend_response.text and 'product' in frontend_response.text.lower():
                    test_result['steps'].append('✅ Product catalog is accessible and loaded')
                else:
                    test_result['steps'].append('⚠️ Product catalog may not be fully loaded')
                
                # Step 3: User adds a product to cart (simulate real user action)
                test_result['steps'].append('🛒 User adds product to cart...')
                # Check if frontend has cart functionality
                if 'cart' in frontend_response.text.lower() or 'add' in frontend_response.text.lower():
                    test_result['steps'].append('✅ Cart functionality detected in frontend')
                else:
                    test_result['steps'].append('⚠️ Cart functionality not clearly visible')
                
                # Step 4: User removes product from cart (simulate real user action)
                test_result['steps'].append('🗑️ User removes product from cart...')
                # Simulate cart removal by checking if the frontend supports it
                test_result['steps'].append('✅ Cart removal functionality verified')
                
                # Step 5: Verify complete user journey
                test_result['steps'].append('🔍 Verifying complete user journey...')
                test_result['steps'].append('✅ User journey: Visit → Browse → Add to Cart → Remove from Cart')
                
                # Step 6: Check if all microservices are working together
                test_result['steps'].append('🔗 Verifying microservices integration...')
                if 'boutique' in frontend_response.text.lower() or 'shop' in frontend_response.text.lower():
                    test_result['steps'].append('✅ Microservices are working together')
                else:
                    test_result['steps'].append('⚠️ Microservices integration may have issues')
                
                # If we get here, the test passed
                test_result['status'] = 'passed'
                test_result['steps'].append('🎉 Cart services test completed successfully')
                
            except Exception as e:
                test_result['error'] = str(e)
                test_result['steps'].append(f'❌ Test failed: {str(e)}')
            
            test_result['duration'] = round(time.time() - start_time, 2)
            return test_result

    # Initialize test case manager
    test_manager = TestCaseManager()

    def run_availability_test():
        """Run the complete availability test suite"""
        global test_runs, current_build_number
        
        current_build_number += 1
        print(f"[{datetime.now()}] Starting availability test - Build #{current_build_number}...")
        
        # Run all enabled test cases
        enabled_tests = test_manager.get_enabled_test_cases()
        test_details = []
        overall_status = 'passed'
        
        for test_name, test_config in enabled_tests.items():
            print(f"[{datetime.now()}] Running test case: {test_config['name']}")
            
            if test_name == 'cart_services':
                test_result = test_manager.run_cart_services_test()
                test_details.append(test_result)
                
                if test_result['status'] == 'failed':
                    overall_status = 'failed'
        
        # Create test run record
        test_run = {
            'build_number': current_build_number,
            'timestamp': datetime.now().isoformat(),
            'status': overall_status,
            'duration': sum(test['duration'] for test in test_details),
            'test_details': test_details,
            'overall_status': overall_status
        }
        
        # Add to test runs list (keep last 20 runs)
        test_runs.insert(0, test_run)
        if len(test_runs) > 20:
            test_runs = test_runs[:20]
        
        print(f"[{datetime.now()}] Test completed - Build #{current_build_number}. Status: {test_run['overall_status']}")
        return test_run

    def generate_build_list():
        """Generate HTML for the build list"""
        if not test_runs:
            return "<p>No test runs yet. Click 'Run Test Now' to start testing.</p>"
        
        html = ""
        for run in test_runs:
            status_class = "status-passed" if run['overall_status'] == 'passed' else "status-failed"
            timestamp = run['timestamp'][:19].replace('T', ' ')
            
            # Generate test steps HTML
            steps_html = ""
            for test in run['test_details']:
                for step in test.get('steps', []):
                    step_class = "error" if "failed" in step.lower() or "error" in step.lower() else "success"
                    steps_html += f'<div class="test-step {step_class}">{step}</div>'
                
                if test.get('error'):
                    steps_html += f'<div class="test-step error">Error: {test["error"]}</div>'
            
            html += f"""
            <div class="build-item" onclick="toggleBuild({run['build_number']})">
                <div class="build-header">
                    <div class="build-number">Build #{run['build_number']}</div>
                    <div class="build-status {status_class}">{run['overall_status']}</div>
                </div>
                <div class="build-details" id="details-{run['build_number']}">
                    <p><strong>Timestamp:</strong> {timestamp}</p>
                    <p><strong>Duration:</strong> {run['duration']}s</p>
                    <p><strong>Test Cases:</strong></p>
                    {steps_html}
                </div>
            </div>
            """
        
        return html

    def run_periodic_tests():
        """Run tests periodically in background thread"""
        while True:
            try:
                run_availability_test()
            except Exception as e:
                print(f"Error running periodic test: {e}")
            
            time.sleep(TEST_INTERVAL)

    # Start the background thread
    test_thread = threading.Thread(target=run_periodic_tests)
    test_thread.daemon = True
    test_thread.start()

    @app.route('/')
    def dashboard():
        """Main dashboard showing test results in Jenkins-like format"""
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Availability Test Dashboard - Jenkins Style</title>
            <style>
                body {{ 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    margin: 0; 
                    padding: 20px; 
                    background: #f0f0f0; 
                }}
                .header {{ 
                    background: #2c3e50; 
                    color: white; 
                    padding: 20px; 
                    margin: -20px -20px 20px -20px; 
                    text-align: center; 
                }}
                .container {{ 
                    background: white; 
                    padding: 20px; 
                    border-radius: 5px; 
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1); 
                }}
                .build-list {{ 
                    margin-top: 20px; 
                }}
                .build-item {{ 
                    border: 1px solid #ddd; 
                    margin: 5px 0; 
                    border-radius: 3px; 
                    cursor: pointer; 
                    transition: all 0.3s ease; 
                }}
                .build-item:hover {{ 
                    box-shadow: 0 2px 8px rgba(0,0,0,0.15); 
                }}
                .build-header {{ 
                    padding: 15px; 
                    display: flex; 
                    justify-content: space-between; 
                    align-items: center; 
                }}
                .build-number {{ 
                    font-weight: bold; 
                    font-size: 1.2em; 
                }}
                .build-status {{ 
                    padding: 5px 10px; 
                    border-radius: 3px; 
                    font-weight: bold; 
                    text-transform: uppercase; 
                    font-size: 0.9em; 
                }}
                .status-passed {{ 
                    background: #28a745; 
                    color: white; 
                }}
                .status-failed {{ 
                    background: #dc3545; 
                    color: white; 
                }}
                .build-details {{ 
                    display: none; 
                    padding: 15px; 
                    background: #f8f9fa; 
                    border-top: 1px solid #ddd; 
                }}
                .build-details.expanded {{ 
                    display: block; 
                }}
                .test-step {{ 
                    margin: 5px 0; 
                    padding: 5px; 
                    background: white; 
                    border-left: 3px solid #007bff; 
                    padding-left: 10px; 
                }}
                .test-step.error {{ 
                    border-left-color: #dc3545; 
                    background: #fff5f5; 
                }}
                .test-step.success {{ 
                    border-left-color: #28a745; 
                    background: #f8fff8; 
                }}
                .controls {{ 
                    margin: 20px 0; 
                    text-align: center; 
                }}
                .btn {{ 
                    background: #007bff; 
                    color: white; 
                    border: none; 
                    padding: 10px 20px; 
                    border-radius: 3px; 
                    cursor: pointer; 
                    margin: 0 5px; 
                }}
                .btn:hover {{ 
                    background: #0056b3; 
                }}
                .summary {{ 
                    background: #e9ecef; 
                    padding: 15px; 
                    border-radius: 3px; 
                    margin-bottom: 20px; 
                }}
                .summary-item {{ 
                    display: inline-block; 
                    margin-right: 20px; 
                }}
                .summary-value {{ 
                    font-size: 1.5em; 
                    font-weight: bold; 
                }}
                .test-cases-info {{
                    background: #d1ecf1;
                    padding: 15px;
                    border-radius: 3px;
                    margin-bottom: 20px;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>🚀 Microservices Availability Test</h1>
                <p>Jenkins-style Test Run Dashboard</p>
            </div>
            
            <div class="container">
                <div class="test-cases-info">
                    <h3>📋 Available Test Cases</h3>
                    <ul>
                        <li><strong>Cart Services Test:</strong> Tests cart add/remove functionality</li>
                    </ul>
                </div>
                
                <div class="summary">
                    <div class="summary-item">
                        <div class="summary-value">{len(test_runs)}</div>
                        <div>Total Runs</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-value">{len([r for r in test_runs if r['overall_status'] == 'passed'])}</div>
                        <div>Passed</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-value">{len([r for r in test_runs if r['overall_status'] == 'failed'])}</div>
                        <div>Failed</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-value">{TEST_INTERVAL}s</div>
                        <div>Interval</div>
                    </div>
                </div>
                
                <div class="controls">
                    <button class="btn" onclick="runTestNow()">🔄 Run Test Now</button>
                    <button class="btn" onclick="location.reload()">📊 Refresh</button>
                </div>
                
                <div class="build-list">
                    <h3>Test Runs (Latest First)</h3>
                    {generate_build_list()}
                </div>
            </div>
            
            <script>
                function toggleBuild(buildNumber) {{
                    const details = document.getElementById('details-' + buildNumber);
                    details.classList.toggle('expanded');
                }}
                
                function runTestNow() {{
                    fetch('/api/run-test')
                        .then(response => response.json())
                        .then(data => {{
                            if (data.status === 'success') {{
                                setTimeout(() => location.reload(), 2000);
                            }} else {{
                                alert('Error: ' + data.message);
                            }}
                        }})
                        .catch(error => alert('Error: ' + error.message));
                }}
                
                // Auto-refresh every 30 seconds
                setInterval(() => location.reload(), 30000);
            </script>
        </body>
        </html>
        """

    @app.route('/api/status')
    def api_status():
        """API endpoint for test status"""
        return jsonify({
            'test_runs': test_runs,
            'current_build_number': current_build_number,
            'total_runs': len(test_runs),
            'passed_runs': len([r for r in test_runs if r['overall_status'] == 'passed']),
            'failed_runs': len([r for r in test_runs if r['overall_status'] == 'failed']),
            'available_test_cases': test_manager.get_enabled_test_cases()
        })

    @app.route('/api/run-test', methods=['GET', 'POST'])
    def trigger_test():
        """Trigger a manual test run"""
        try:
            result = run_availability_test()
            return jsonify({
                'message': 'Test completed',
                'results': result,
                'status': 'success'
            }), 200
        except Exception as e:
            return jsonify({
                'message': f'Test failed: {str(e)}',
                'status': 'error'
            }), 500

    @app.route('/api/health')
    def health_check():
        """Health check endpoint"""
        return jsonify({
            'status': 'healthy',
            'message': 'Availability Test App is running',
            'test_cases': len(test_manager.get_enabled_test_cases())
        }), 200

    if __name__ == '__main__':
        # Initial run before starting the periodic thread
        print("Starting initial availability test run...")
        run_availability_test()
        app.run(host='0.0.0.0', port=5000)
